<?xml version="1.0" encoding="utf-8"?>
<modification>
	<name>Недавно просмотренные</name>
	<code>recently-viewed</code>
	<version>1.0</version>
	<author>https://pixelmax.com</author>
	<link>https://pixelmax.com</link>
	<file path="catalog/controller/product/product.php">
		<operation>
			<search index="0"><![CDATA[$this->load->model('tool/image');]]></search>
			<add position="after"><![CDATA[

        	if (!isset($this->session->data['recently_viewed'])) {
				$this->session->data['recently_viewed'] = array();
			}

			if (isset($this->session->data['recently_viewed'])) {

				$recently_viewed_ids = (isset($this->session->data['recently_viewed']) ? $this->session->data['recently_viewed'] : '');


				$recently_viewed_ids = array_reverse($recently_viewed_ids);

				if($recently_viewed_ids){

					$recently_viewed = array();

					foreach($recently_viewed_ids as $recently_viewed_id){

						$result=$this->model_catalog_product->getProduct($recently_viewed_id);
						if(!$result) continue;

						if ($result['image']) {
							$image = $this->model_tool_image->resize($result['image'], $this->config->get($this->config->get('config_theme') . '_image_product_width'), $this->config->get($this->config->get('config_theme') . '_image_product_height'));
						} else {
							$image = $this->model_tool_image->resize('placeholder.png', $this->config->get($this->config->get('config_theme') . '_image_product_width'), $this->config->get($this->config->get('config_theme') . '_image_product_height'));
						}

						if ($this->customer->isLogged() || !$this->config->get('config_customer_price')) {
							$price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
						} else {
							$price = false;
						}

						if ((float)$result['special']) {
							$special = $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
						} else {
							$special = false;
						}

						if ($this->config->get('config_tax')) {
							$tax = $this->currency->format((float)$result['special'] ? $result['special'] : $result['price'], $this->session->data['currency']);
						} else {
							$tax = false;
						}

						if ($this->config->get('config_review_status')) {
							$rating = (int)$result['rating'];
						} else {
							$rating = false;
						}

						$date_now = date("Y-m-d H:i:s");

						if ($result['quantity'] <= 0) {
							$stock = $result['stock_status'];
						} else {
							$stock = 'В наличии';
						}
							$stock = $result['stock_status'];
						$bestseller = false;
						foreach($this->model_catalog_product->getCategories($result['product_id']) as $cat){
							if($cat['category_id'] == (int)CATEGORY_BESTSELLER) $bestseller = true;
						}

						$params = array(
							'product_id'  => $result['product_id'],
							'thumb'       => $image,
							'name'        => $result['name'],
							'model'        => $result['model'],
							'description' => utf8_substr(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8')), 0, $this->config->get($this->config->get('config_theme') . '_product_description_length')) . '..',
							'sku'         => $result['sku'],
							'price'       => $price,
							'is_new' => ( floor((strtotime($date_now) - strtotime($result['date_added']))/86400) <= 15 ) ? true : false,
							'stock_status'=> $result['stock_status'],
							'novelty'     => $result['novelty'],
							'bestseller'  => $bestseller,
							'mpn'=> $result['mpn'],
							'special'     => $special,
							'tax'         => $tax,
							'minimum'     => ($result['minimum'] > 0) ? $result['minimum'] : 1,
							'rating'      => $rating,
							'href'        => $this->url->link('product/product', 'product_id=' . $result['product_id']),
							'options'     => $this->model_catalog_product->getProductOptions($result['product_id'])
						);


						$recently_viewed[]=$params;

					}


				}

			}

			if (!in_array($this->request->get['product_id'], $this->session->data['recently_viewed'])) {
				if(!is_array($this->session->data['recently_viewed'])) $this->session->data['recently_viewed'] = [];
				$this->session->data['recently_viewed'] = array_merge([$this->request->get['product_id']], $this->session->data['recently_viewed']);
            }
			
			$data['recently_viewed'] = (isset($recently_viewed) ? $recently_viewed : '');

            ]]>			</add>
		</operation>
	</file>
	<file path="catalog/controller/product/category.php">
		<operation>
			<search><![CDATA[$data['header'] = $this->load->controller('common/header');]]></search>
			<add position="after"><![CDATA[
			
			$this->load->model('tool/image');
        	if (!isset($this->session->data['recently_viewed'])) {
				$this->session->data['recently_viewed'] = array();
			}

			if (isset($this->session->data['recently_viewed'])) {

				$recently_viewed_ids = (isset($this->session->data['recently_viewed']) ? $this->session->data['recently_viewed'] : '');


				$recently_viewed_ids = array_reverse($recently_viewed_ids);

				if($recently_viewed_ids){

					$recently_viewed = array();

					foreach($recently_viewed_ids as $recently_viewed_id){

						$result=$this->model_catalog_product->getProduct($recently_viewed_id);
						if(!$result) continue;

						if ($result['image']) {
							$image = $this->model_tool_image->resize($result['image'], $this->config->get($this->config->get('config_theme') . '_image_product_width'), $this->config->get($this->config->get('config_theme') . '_image_product_height'));
						} else {
							$image = $this->model_tool_image->resize('placeholder.png', $this->config->get($this->config->get('config_theme') . '_image_product_width'), $this->config->get($this->config->get('config_theme') . '_image_product_height'));
						}

						if ($this->customer->isLogged() || !$this->config->get('config_customer_price')) {
							$price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
						} else {
							$price = false;
						}

						if ((float)$result['special']) {
							$special = $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
						} else {
							$special = false;
						}

						if ($this->config->get('config_tax')) {
							$tax = $this->currency->format((float)$result['special'] ? $result['special'] : $result['price'], $this->session->data['currency']);
						} else {
							$tax = false;
						}

						if ($this->config->get('config_review_status')) {
							$rating = (int)$result['rating'];
						} else {
							$rating = false;
						}

						$date_now = date("Y-m-d H:i:s");

						if ($result['quantity'] <= 0) {
							$stock = $result['stock_status'];
						} else {
							$stock = 'В наличии';
						}
							$stock = $result['stock_status'];
						$bestseller = false;
						foreach($this->model_catalog_product->getCategories($result['product_id']) as $cat){
							if($cat['category_id'] == (int)CATEGORY_BESTSELLER) $bestseller = true;
						}

						$params = array(
							'product_id'  => $result['product_id'],
							'thumb'       => $image,
							'name'        => $result['name'],
							'model'        => $result['model'],
							'description' => utf8_substr(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8')), 0, $this->config->get($this->config->get('config_theme') . '_product_description_length')) . '..',
							'sku'         => $result['sku'],
							'price'       => $price,
							'novelty'     => $result['novelty'],
							'bestseller'  => $bestseller,
							'is_new' => ( floor((strtotime($date_now) - strtotime($result['date_added']))/86400) <= 15 ) ? true : false,
							'stock_status'=> $result['stock_status'],
							'mpn'=> $result['mpn'],
							'special'     => $special,
							'tax'         => $tax,
							'minimum'     => ($result['minimum'] > 0) ? $result['minimum'] : 1,
							'rating'      => $rating,
							'href'        => $this->url->link('product/product', 'product_id=' . $result['product_id']),
							'options'     => $this->model_catalog_product->getProductOptions($result['product_id'])
						);


						$recently_viewed[]=$params;

					}


				}

			}
			
			$data['recently_viewed'] = (isset($recently_viewed) ? $recently_viewed : '');

            ]]>			</add>
		</operation>
	</file>
	<file path="catalog/controller/information/information.php">
		<operation>
			<search><![CDATA[$data['header'] = $this->load->controller('common/header');]]></search>
			<add position="after"><![CDATA[
			
			$this->load->model('tool/image');
        	if (!isset($this->session->data['recently_viewed'])) {
				$this->session->data['recently_viewed'] = array();
			}

			if (isset($this->session->data['recently_viewed'])) {

				$recently_viewed_ids = (isset($this->session->data['recently_viewed']) ? $this->session->data['recently_viewed'] : '');


				$recently_viewed_ids = array_reverse($recently_viewed_ids);

				if($recently_viewed_ids){

					$recently_viewed = array();

					foreach($recently_viewed_ids as $recently_viewed_id){

						$result=$this->model_catalog_product->getProduct($recently_viewed_id);
						if(!$result) continue;

						if ($result['image']) {
							$image = $this->model_tool_image->resize($result['image'], $this->config->get($this->config->get('config_theme') . '_image_product_width'), $this->config->get($this->config->get('config_theme') . '_image_product_height'));
						} else {
							$image = $this->model_tool_image->resize('placeholder.png', $this->config->get($this->config->get('config_theme') . '_image_product_width'), $this->config->get($this->config->get('config_theme') . '_image_product_height'));
						}

						if ($this->customer->isLogged() || !$this->config->get('config_customer_price')) {
							$price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
						} else {
							$price = false;
						}

						if ((float)$result['special']) {
							$special = $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
						} else {
							$special = false;
						}

						if ($this->config->get('config_tax')) {
							$tax = $this->currency->format((float)$result['special'] ? $result['special'] : $result['price'], $this->session->data['currency']);
						} else {
							$tax = false;
						}

						if ($this->config->get('config_review_status')) {
							$rating = (int)$result['rating'];
						} else {
							$rating = false;
						}

						$date_now = date("Y-m-d H:i:s");

						if ($result['quantity'] <= 0) {
							$stock = $result['stock_status'];
						} else {
							$stock = 'В наличии';
						}
							$stock = $result['stock_status'];
						$bestseller = false;
						foreach($this->model_catalog_product->getCategories($result['product_id']) as $cat){
							if($cat['category_id'] == (int)CATEGORY_BESTSELLER) $bestseller = true;
						}

						$params = array(
							'product_id'  => $result['product_id'],
							'thumb'       => $image,
							'name'        => $result['name'],
							'model'        => $result['model'],
							'description' => utf8_substr(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8')), 0, $this->config->get($this->config->get('config_theme') . '_product_description_length')) . '..',
							'sku'         => $result['sku'],
							'price'       => $price,
							'novelty'     => $result['novelty'],
							'bestseller'  => $bestseller,
							'is_new' => ( floor((strtotime($date_now) - strtotime($result['date_added']))/86400) <= 15 ) ? true : false,
							'stock_status'=> $result['stock_status'],
							'mpn'=> $result['mpn'],
							'special'     => $special,
							'tax'         => $tax,
							'minimum'     => ($result['minimum'] > 0) ? $result['minimum'] : 1,
							'rating'      => $rating,
							'href'        => $this->url->link('product/product', 'product_id=' . $result['product_id']),
							'options'     => $this->model_catalog_product->getProductOptions($result['product_id'])
						);


						$recently_viewed[]=$params;

					}


				}

			}
			
			$data['recently_viewed'] = (isset($recently_viewed) ? $recently_viewed : '');

            ]]>			</add>
		</operation>
	</file>
</modification>
		